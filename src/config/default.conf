
server
{
	server_timeout =  10000; //attribute
	listen = 4242; //attribute
	server_name = gigi_one; //attribute
	index = index.html; //attribute
	client_max_body_size = 10m; //attribute
	error_pages = ./www/errors/404.html; //map v["404"]
	error_pages = ./www/errors/405.html; //map v["405"]
	error_pages = ./www/errors/505.html; // map v["505"]
	location / 
	{
			allow_methods = GET POST DELETE;
			upload_path = ./www/uploads;
	}
		location / upload
	{
			allow_methods = GET POST DELETE;
			upload_path = ./www/uploads;
	}
}
# they need to be positive and at the end equal with zero
server 
{
	server_timeout = 10000;
	listen = 4243;
	server_name = gigi_two;
	index = index2.html;
	client_max_body_size = 10m;
	error_pages = ./www/errors/404.hmtl;
	location / 
	{
			allow_methods = GET POST;
			upload_path = ./www/uploads;
	}
}
server 
{
	server_timeout = 10000;
	listen = 4244;
	server_name = gigi_three;
	index = index.html;
	client_max_body_size = 10m;
	error_pages = ./www/errors/405.html;
	error_pages = ./www/errors/404.hmtl;
	location / 
	{
		allow_methods = GET;
		client_max_body_size = 10m;
	}
}
server 
{
	server_timeout = 10000;
	listen = 4245;
	server_name = gigi_four;
	index = index2.html;
	error_pages = ./www/errors/404.hmtl;
	location / 
	{
		allow_methods = GET;
		client_max_body_size = 10m;
	}
}
# body client 10 * 1024 (caclulator)
# listen, server_timeout, location, error_pages 
# location ---> methods GET POST DELETE (without on of the methods we are eliminating what methods are existing)
# for each one port server , location, body size for this method 
# map string to string server && map string to vector
# brackets and semicolons checkers
# isstream (trimer for start and end)
#

 # pass PHP scripts to FastCGI server
 #
 #location ~ \.php$ {
 # include snippets/fastcgi-php.conf;
 #
 # # With php-fpm (or other unix sockets):
 # fastcgi_pass unix:/run/php/php7.4-fpm.sock;
 # # With php-cgi (or other tcp sockets):
 #}

 # deny access to .htaccess files, if Apache's document root
 # concurs with nginx's one
 #
 #location ~ /\.ht {
 # deny all;
 #}

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
# listen 80;
# listen [::]:80;
#
# server_name example.com;
#
# root /var/www/example.com;
# index index.html;
#
# location / {
#  try_files $uri $uri/ =404;
# }
#}

 # SSL configuration
 #
 # listen 443 ssl default_server;
 # listen [::]:443 ssl default_server;
 #
 # Note: You should disable gzip for SSL traffic.
 # See: https://bugs.debian.org/773332
 #
 # Read up on ssl_ciphers to ensure a secure configuration.
 # See: https://bugs.debian.org/765782
 #
 # Self signed certs generated by the ssl-cert package
 # Don't use them in a production server!
 #
 # include snippets/snakeoil.conf;